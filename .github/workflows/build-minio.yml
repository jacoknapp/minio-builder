name: Build MinIO Image

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/jacoknapp/minio

jobs:
  prepare:
    name: Prepare Tag
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.minio.outputs.latest_tag }}
      sanitized_tag: ${{ steps.minio.outputs.sanitized_tag }}
      exists: ${{ steps.check-manifest.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Fetch MinIO source
        id: minio
        shell: bash
        run: |
          set -euo pipefail
          git clone --filter=blob:none --tags https://github.com/minio/minio.git minio
          cd minio
          latest_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)")
          git checkout "$latest_tag"
          sanitized_tag=$(echo "$latest_tag" | tr '[:upper:]' '[:lower:]')
          echo "latest_tag=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "sanitized_tag=$sanitized_tag" >> "$GITHUB_OUTPUT"

      - name: Check if release tag already published
        id: check-manifest
        shell: bash
        env:
          SANITIZED_TAG: ${{ steps.minio.outputs.sanitized_tag }}
        run: |
          if docker manifest inspect "${{ env.IMAGE_NAME }}:${SANITIZED_TAG}" >/dev/null 2>&1; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build and Push (${{ matrix.arch }})
    needs: prepare
    if: needs.prepare.outputs.exists != 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64, arm, ppc64le, s390x, riscv64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Fetch MinIO source
        shell: bash
        run: |
          set -euo pipefail
          git clone --filter=blob:none --tags https://github.com/minio/minio.git minio
          cd minio
          git checkout "${{ needs.prepare.outputs.latest_tag }}"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          check-latest: true

      - name: Build binary (${{ matrix.arch }})
        shell: bash
        run: |
          set -euo pipefail
          cd minio
          export CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }}
          LDFLAGS=$(go run buildscripts/gen-ldflags.go)
          go build -tags kqueue -trimpath --ldflags "$LDFLAGS" -o ./minio .
          file ./minio || true

      - name: Build and push image (${{ matrix.arch }})
        uses: docker/build-push-action@v5
        with:
          context: ./minio
          file: ./minio/Dockerfile.scratch
          platforms: linux/${{ matrix.arch }}
          push: true
          provenance: false
          no-cache: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-${{ matrix.arch }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ needs.prepare.outputs.latest_tag }}

  manifest:
    name: Create Manifest
    needs: [prepare, build]
    if: needs.prepare.outputs.exists != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Create and push multi-arch manifest
        shell: bash
        run: |
          set -euo pipefail
          docker buildx imagetools create \
            -t "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-amd64" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-arm64" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-arm" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-ppc64le" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-s390x" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-riscv64"
          docker buildx imagetools create \
            -t "${{ env.IMAGE_NAME }}:latest" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-amd64" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-arm64" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-arm" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-ppc64le" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-s390x" \
            "${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }}-riscv64"

      - name: Publish summary
        shell: bash
        run: |
          echo "Published ${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.sanitized_tag }} (amd64, arm64, arm, ppc64le, s390x, riscv64) from MinIO release ${{ needs.prepare.outputs.latest_tag }}." >> "$GITHUB_STEP_SUMMARY"
